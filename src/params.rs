use fitsrs::{
    hdu::header::{extension::image::Image, Header},
};
use serde::{Deserialize, Serialize};
use fitsrs::card::CardValue;
use crate::{
    error::Error,
};

#[derive(Debug, Deserialize, Serialize)]
#[serde(rename_all = "UPPERCASE")]
pub struct WCSParams {
   pub naxis1 : i64,
   pub naxis2 : i64,
   pub ctype1 : String,
   pub naxis : Option<i64>,
   pub naxis3 : Option<i64>,
   pub naxis4 : Option<i64>,
   pub crpix1 : Option<f64>,
   pub crpix2 : Option<f64>,
   pub crpix3 : Option<f64>,
   pub crval1 : Option<f64>,
   pub crval2 : Option<f64>,
   pub crval3 : Option<f64>,
   pub cd1_1 : Option<f64>,
   pub cd1_2 : Option<f64>,
   pub cd1_3 : Option<f64>,
   pub cd2_1 : Option<f64>,
   pub cd2_2 : Option<f64>,
   pub cd2_3 : Option<f64>,
   pub cd3_1 : Option<f64>,
   pub cd3_2 : Option<f64>,
   pub cd3_3 : Option<f64>,
   pub pc1_1 : Option<f64>,
   pub pc1_2 : Option<f64>,
   pub pc1_3 : Option<f64>,
   pub pc2_1 : Option<f64>,
   pub pc2_2 : Option<f64>,
   pub pc2_3 : Option<f64>,
   pub pc3_1 : Option<f64>,
   pub pc3_2 : Option<f64>,
   pub pc3_3 : Option<f64>,
   pub cdelt1 : Option<f64>,
   pub cdelt2 : Option<f64>,
   pub cdelt3 : Option<f64>,
   pub crota1 : Option<f64>,
   pub crota2 : Option<f64>,
   pub crota3 : Option<f64>,
   pub ctype2 : Option<String>,
   pub ctype3 : Option<String>,
   pub pv1_0 : Option<f64>,
   pub pv1_1 : Option<f64>,
   pub pv1_2 : Option<f64>,
   pub pv2_0 : Option<f64>,
   pub pv2_1 : Option<f64>,
   pub pv2_2 : Option<f64>,
   pub pv2_3 : Option<f64>,
   pub pv2_4 : Option<f64>,
   pub pv2_5 : Option<f64>,
   pub pv2_6 : Option<f64>,
   pub pv2_7 : Option<f64>,
   pub pv2_8 : Option<f64>,
   pub pv2_9 : Option<f64>,
   pub pv2_10 : Option<f64>,
   pub pv2_11 : Option<f64>,
   pub pv2_12 : Option<f64>,
   pub pv2_13 : Option<f64>,
   pub pv2_14 : Option<f64>,
   pub pv2_15 : Option<f64>,
   pub pv2_16 : Option<f64>,
   pub pv2_17 : Option<f64>,
   pub pv2_18 : Option<f64>,
   pub pv2_19 : Option<f64>,
   pub pv2_20 : Option<f64>,
   pub epoch : Option<f64>,
   pub equinox : Option<f64>,
   pub radesys : Option<String>,
   pub lonpole : Option<f64>,
   pub latpole : Option<f64>,
   pub a_order : Option<i64>,
   pub a_0_0 : Option<f64>,
   pub a_0_1 : Option<f64>,
   pub a_0_2 : Option<f64>,
   pub a_0_3 : Option<f64>,
   pub a_0_4 : Option<f64>,
   pub a_0_5 : Option<f64>,
   pub a_0_6 : Option<f64>,
   pub a_1_0 : Option<f64>,
   pub a_1_1 : Option<f64>,
   pub a_1_2 : Option<f64>,
   pub a_1_3 : Option<f64>,
   pub a_1_4 : Option<f64>,
   pub a_1_5 : Option<f64>,
   pub a_2_0 : Option<f64>,
   pub a_2_1 : Option<f64>,
   pub a_2_2 : Option<f64>,
   pub a_2_3 : Option<f64>,
   pub a_2_4 : Option<f64>,
   pub a_3_0 : Option<f64>,
   pub a_3_1 : Option<f64>,
   pub a_3_2 : Option<f64>,
   pub a_3_3 : Option<f64>,
   pub a_4_0 : Option<f64>,
   pub a_4_1 : Option<f64>,
   pub a_4_2 : Option<f64>,
   pub a_5_0 : Option<f64>,
   pub a_5_1 : Option<f64>,
   pub a_6_0 : Option<f64>,
   pub b_order : Option<i64>,
   pub b_0_0 : Option<f64>,
   pub b_0_1 : Option<f64>,
   pub b_0_2 : Option<f64>,
   pub b_0_3 : Option<f64>,
   pub b_0_4 : Option<f64>,
   pub b_0_5 : Option<f64>,
   pub b_0_6 : Option<f64>,
   pub b_1_0 : Option<f64>,
   pub b_1_1 : Option<f64>,
   pub b_1_2 : Option<f64>,
   pub b_1_3 : Option<f64>,
   pub b_1_4 : Option<f64>,
   pub b_1_5 : Option<f64>,
   pub b_2_0 : Option<f64>,
   pub b_2_1 : Option<f64>,
   pub b_2_2 : Option<f64>,
   pub b_2_3 : Option<f64>,
   pub b_2_4 : Option<f64>,
   pub b_3_0 : Option<f64>,
   pub b_3_1 : Option<f64>,
   pub b_3_2 : Option<f64>,
   pub b_3_3 : Option<f64>,
   pub b_4_0 : Option<f64>,
   pub b_4_1 : Option<f64>,
   pub b_4_2 : Option<f64>,
   pub b_5_0 : Option<f64>,
   pub b_5_1 : Option<f64>,
   pub b_6_0 : Option<f64>,
   pub ap_order : Option<i64>,
   pub ap_0_0 : Option<f64>,
   pub ap_0_1 : Option<f64>,
   pub ap_0_2 : Option<f64>,
   pub ap_0_3 : Option<f64>,
   pub ap_0_4 : Option<f64>,
   pub ap_0_5 : Option<f64>,
   pub ap_0_6 : Option<f64>,
   pub ap_1_0 : Option<f64>,
   pub ap_1_1 : Option<f64>,
   pub ap_1_2 : Option<f64>,
   pub ap_1_3 : Option<f64>,
   pub ap_1_4 : Option<f64>,
   pub ap_1_5 : Option<f64>,
   pub ap_2_0 : Option<f64>,
   pub ap_2_1 : Option<f64>,
   pub ap_2_2 : Option<f64>,
   pub ap_2_3 : Option<f64>,
   pub ap_2_4 : Option<f64>,
   pub ap_3_0 : Option<f64>,
   pub ap_3_1 : Option<f64>,
   pub ap_3_2 : Option<f64>,
   pub ap_3_3 : Option<f64>,
   pub ap_4_0 : Option<f64>,
   pub ap_4_1 : Option<f64>,
   pub ap_4_2 : Option<f64>,
   pub ap_5_0 : Option<f64>,
   pub ap_5_1 : Option<f64>,
   pub ap_6_0 : Option<f64>,
   pub bp_order : Option<i64>,
   pub bp_0_0 : Option<f64>,
   pub bp_0_1 : Option<f64>,
   pub bp_0_2 : Option<f64>,
   pub bp_0_3 : Option<f64>,
   pub bp_0_4 : Option<f64>,
   pub bp_0_5 : Option<f64>,
   pub bp_0_6 : Option<f64>,
   pub bp_1_0 : Option<f64>,
   pub bp_1_1 : Option<f64>,
   pub bp_1_2 : Option<f64>,
   pub bp_1_3 : Option<f64>,
   pub bp_1_4 : Option<f64>,
   pub bp_1_5 : Option<f64>,
   pub bp_2_0 : Option<f64>,
   pub bp_2_1 : Option<f64>,
   pub bp_2_2 : Option<f64>,
   pub bp_2_3 : Option<f64>,
   pub bp_2_4 : Option<f64>,
   pub bp_3_0 : Option<f64>,
   pub bp_3_1 : Option<f64>,
   pub bp_3_2 : Option<f64>,
   pub bp_3_3 : Option<f64>,
   pub bp_4_0 : Option<f64>,
   pub bp_4_1 : Option<f64>,
   pub bp_4_2 : Option<f64>,
   pub bp_5_0 : Option<f64>,
   pub bp_5_1 : Option<f64>,
   pub bp_6_0 : Option<f64>,

}

fn try_parse_card_from_header<T: CardValue>(header: &Header<Image>, key: &'static str) -> Result<Option<T>, Error> {
    let mut key_s = key.to_string();
    let filled_spaces = (0..(8 - key_s.len())).map(|_| " ").collect::<String>();
    key_s.push_str(&filled_spaces);
    
    let bytes = key_s.as_bytes().as_ptr() as *const [u8; 8];
    header.get_parsed::<T>(unsafe { &*bytes }).transpose().map_err(|e| e.into())
}
 
fn parse_optional_card_with_type<T: CardValue + std::str::FromStr>(header: &Header<Image>, key: &'static str) -> Result<Option<T>, Error> {
    match try_parse_card_from_header::<T>(header, key) {
        Ok(v) => Ok(v),
        _ => {
            let str = try_parse_card_from_header::<String>(header, key)
                .unwrap_or(None);

            Ok(if let Some(ss) = str {
                ss.trim().parse::<T>()
                    .map(|v| Some(v))
                    .unwrap_or(None)
                    //.map_err(|_| Error::CardWrongType(key.to_string(), std::any::type_name::<String>().to_string()))
            } else {
                // card not found but it is ok as it is not mandatory
                None
            })
        }
    }
}

fn parse_mandatory_card_with_type<T: CardValue>(header: &Header<Image>, key: &'static str) -> Result<T, Error> {
    match try_parse_card_from_header::<T>(header, key) {
        // No parsing error and found
        Ok(Some(v)) => {
            Ok(v)
        },
        // No error but not found, we return an error
        Ok(None) => Err(Error::MandatoryWCSKeywordsMissing(key)),
        // Return the parsing error
        Err(e) => {
            Err(e.into())
        }
    }
}

impl<'a> TryFrom<&'a Header<Image>> for WCSParams {
    type Error = Error;

    fn try_from(h: &'a Header<Image>) -> Result<Self, Self::Error> {
        Ok(WCSParams {           naxis1: parse_mandatory_card_with_type::<i64>(h, "NAXIS1")?,
           naxis2: parse_mandatory_card_with_type::<i64>(h, "NAXIS2")?,
           ctype1: parse_mandatory_card_with_type::<String>(h, "CTYPE1")?,
           ctype2: parse_optional_card_with_type::<String>(h, "CTYPE2")?,
           ctype3: parse_optional_card_with_type::<String>(h, "CTYPE3")?,
           naxis: parse_optional_card_with_type::<i64>(h, "NAXIS")?,
           a_order: parse_optional_card_with_type::<i64>(h, "A_ORDER")?,
           b_order: parse_optional_card_with_type::<i64>(h, "B_ORDER")?,
           ap_order: parse_optional_card_with_type::<i64>(h, "AP_ORDER")?,
           bp_order: parse_optional_card_with_type::<i64>(h, "BP_ORDER")?,
           crpix1: parse_optional_card_with_type::<f64>(h, "CRPIX1")?,
           crpix2: parse_optional_card_with_type::<f64>(h, "CRPIX2")?,
           crpix3: parse_optional_card_with_type::<f64>(h, "CRPIX3")?,
           crval1: parse_optional_card_with_type::<f64>(h, "CRVAL1")?,
           crval2: parse_optional_card_with_type::<f64>(h, "CRVAL2")?,
           crval3: parse_optional_card_with_type::<f64>(h, "CRVAL3")?,
           crota1: parse_optional_card_with_type::<f64>(h, "CROTA1")?,
           crota2: parse_optional_card_with_type::<f64>(h, "CROTA2")?,
           crota3: parse_optional_card_with_type::<f64>(h, "CROTA3")?,
           cdelt1: parse_optional_card_with_type::<f64>(h, "CDELT1")?,
           cdelt2: parse_optional_card_with_type::<f64>(h, "CDELT2")?,
           cdelt3: parse_optional_card_with_type::<f64>(h, "CDELT3")?,
           naxis3: parse_optional_card_with_type::<i64>(h, "NAXIS3")?,
           naxis4: parse_optional_card_with_type::<i64>(h, "NAXIS4")?,
           lonpole: parse_optional_card_with_type::<f64>(h, "LONPOLE")?,
           latpole: parse_optional_card_with_type::<f64>(h, "LATPOLE")?,
           equinox: parse_optional_card_with_type::<f64>(h, "EQUINOX")?,
           epoch: parse_optional_card_with_type::<f64>(h, "EPOCH")?,
           radesys: parse_optional_card_with_type::<String>(h, "RADESYS")?,
           pv1_0: parse_optional_card_with_type::<f64>(h, "PV1_0")?,
           pv1_1: parse_optional_card_with_type::<f64>(h, "PV1_1")?,
           pv1_2: parse_optional_card_with_type::<f64>(h, "PV1_2")?,
           pv2_0: parse_optional_card_with_type::<f64>(h, "PV2_0")?,
           pv2_1: parse_optional_card_with_type::<f64>(h, "PV2_1")?,
           pv2_2: parse_optional_card_with_type::<f64>(h, "PV2_2")?,
           pv2_3: parse_optional_card_with_type::<f64>(h, "PV2_3")?,
           pv2_4: parse_optional_card_with_type::<f64>(h, "PV2_4")?,
           pv2_5: parse_optional_card_with_type::<f64>(h, "PV2_5")?,
           pv2_6: parse_optional_card_with_type::<f64>(h, "PV2_6")?,
           pv2_7: parse_optional_card_with_type::<f64>(h, "PV2_7")?,
           pv2_8: parse_optional_card_with_type::<f64>(h, "PV2_8")?,
           pv2_9: parse_optional_card_with_type::<f64>(h, "PV2_9")?,
           pv2_10: parse_optional_card_with_type::<f64>(h, "PV2_10")?,
           pv2_11: parse_optional_card_with_type::<f64>(h, "PV2_11")?,
           pv2_12: parse_optional_card_with_type::<f64>(h, "PV2_12")?,
           pv2_13: parse_optional_card_with_type::<f64>(h, "PV2_13")?,
           pv2_14: parse_optional_card_with_type::<f64>(h, "PV2_14")?,
           pv2_15: parse_optional_card_with_type::<f64>(h, "PV2_15")?,
           pv2_16: parse_optional_card_with_type::<f64>(h, "PV2_16")?,
           pv2_17: parse_optional_card_with_type::<f64>(h, "PV2_17")?,
           pv2_18: parse_optional_card_with_type::<f64>(h, "PV2_18")?,
           pv2_19: parse_optional_card_with_type::<f64>(h, "PV2_19")?,
           pv2_20: parse_optional_card_with_type::<f64>(h, "PV2_20")?,
           cd1_1: parse_optional_card_with_type::<f64>(h, "CD1_1")?,
           cd1_2: parse_optional_card_with_type::<f64>(h, "CD1_2")?,
           cd1_3: parse_optional_card_with_type::<f64>(h, "CD1_3")?,
           cd2_1: parse_optional_card_with_type::<f64>(h, "CD2_1")?,
           cd2_2: parse_optional_card_with_type::<f64>(h, "CD2_2")?,
           cd2_3: parse_optional_card_with_type::<f64>(h, "CD2_3")?,
           cd3_1: parse_optional_card_with_type::<f64>(h, "CD3_1")?,
           cd3_2: parse_optional_card_with_type::<f64>(h, "CD3_2")?,
           cd3_3: parse_optional_card_with_type::<f64>(h, "CD3_3")?,
           pc1_1: parse_optional_card_with_type::<f64>(h, "PC1_1")?,
           pc1_2: parse_optional_card_with_type::<f64>(h, "PC1_2")?,
           pc1_3: parse_optional_card_with_type::<f64>(h, "PC1_3")?,
           pc2_1: parse_optional_card_with_type::<f64>(h, "PC2_1")?,
           pc2_2: parse_optional_card_with_type::<f64>(h, "PC2_2")?,
           pc2_3: parse_optional_card_with_type::<f64>(h, "PC2_3")?,
           pc3_1: parse_optional_card_with_type::<f64>(h, "PC3_1")?,
           pc3_2: parse_optional_card_with_type::<f64>(h, "PC3_2")?,
           pc3_3: parse_optional_card_with_type::<f64>(h, "PC3_3")?,
           a_0_0: parse_optional_card_with_type::<f64>(h, "A_0_0")?,
           a_1_0: parse_optional_card_with_type::<f64>(h, "A_1_0")?,
           a_2_0: parse_optional_card_with_type::<f64>(h, "A_2_0")?,
           a_3_0: parse_optional_card_with_type::<f64>(h, "A_3_0")?,
           a_4_0: parse_optional_card_with_type::<f64>(h, "A_4_0")?,
           a_5_0: parse_optional_card_with_type::<f64>(h, "A_5_0")?,
           a_6_0: parse_optional_card_with_type::<f64>(h, "A_6_0")?,
           a_0_1: parse_optional_card_with_type::<f64>(h, "A_0_1")?,
           a_1_1: parse_optional_card_with_type::<f64>(h, "A_1_1")?,
           a_2_1: parse_optional_card_with_type::<f64>(h, "A_2_1")?,
           a_3_1: parse_optional_card_with_type::<f64>(h, "A_3_1")?,
           a_4_1: parse_optional_card_with_type::<f64>(h, "A_4_1")?,
           a_5_1: parse_optional_card_with_type::<f64>(h, "A_5_1")?,
           a_0_2: parse_optional_card_with_type::<f64>(h, "A_0_2")?,
           a_1_2: parse_optional_card_with_type::<f64>(h, "A_1_2")?,
           a_2_2: parse_optional_card_with_type::<f64>(h, "A_2_2")?,
           a_3_2: parse_optional_card_with_type::<f64>(h, "A_3_2")?,
           a_4_2: parse_optional_card_with_type::<f64>(h, "A_4_2")?,
           a_0_3: parse_optional_card_with_type::<f64>(h, "A_0_3")?,
           a_1_3: parse_optional_card_with_type::<f64>(h, "A_1_3")?,
           a_2_3: parse_optional_card_with_type::<f64>(h, "A_2_3")?,
           a_3_3: parse_optional_card_with_type::<f64>(h, "A_3_3")?,
           a_0_4: parse_optional_card_with_type::<f64>(h, "A_0_4")?,
           a_1_4: parse_optional_card_with_type::<f64>(h, "A_1_4")?,
           a_2_4: parse_optional_card_with_type::<f64>(h, "A_2_4")?,
           a_0_5: parse_optional_card_with_type::<f64>(h, "A_0_5")?,
           a_1_5: parse_optional_card_with_type::<f64>(h, "A_1_5")?,
           a_0_6: parse_optional_card_with_type::<f64>(h, "A_0_6")?,
           ap_0_0: parse_optional_card_with_type::<f64>(h, "AP_0_0")?,
           ap_1_0: parse_optional_card_with_type::<f64>(h, "AP_1_0")?,
           ap_2_0: parse_optional_card_with_type::<f64>(h, "AP_2_0")?,
           ap_3_0: parse_optional_card_with_type::<f64>(h, "AP_3_0")?,
           ap_4_0: parse_optional_card_with_type::<f64>(h, "AP_4_0")?,
           ap_5_0: parse_optional_card_with_type::<f64>(h, "AP_5_0")?,
           ap_6_0: parse_optional_card_with_type::<f64>(h, "AP_6_0")?,
           ap_0_1: parse_optional_card_with_type::<f64>(h, "AP_0_1")?,
           ap_1_1: parse_optional_card_with_type::<f64>(h, "AP_1_1")?,
           ap_2_1: parse_optional_card_with_type::<f64>(h, "AP_2_1")?,
           ap_3_1: parse_optional_card_with_type::<f64>(h, "AP_3_1")?,
           ap_4_1: parse_optional_card_with_type::<f64>(h, "AP_4_1")?,
           ap_5_1: parse_optional_card_with_type::<f64>(h, "AP_5_1")?,
           ap_0_2: parse_optional_card_with_type::<f64>(h, "AP_0_2")?,
           ap_1_2: parse_optional_card_with_type::<f64>(h, "AP_1_2")?,
           ap_2_2: parse_optional_card_with_type::<f64>(h, "AP_2_2")?,
           ap_3_2: parse_optional_card_with_type::<f64>(h, "AP_3_2")?,
           ap_4_2: parse_optional_card_with_type::<f64>(h, "AP_4_2")?,
           ap_0_3: parse_optional_card_with_type::<f64>(h, "AP_0_3")?,
           ap_1_3: parse_optional_card_with_type::<f64>(h, "AP_1_3")?,
           ap_2_3: parse_optional_card_with_type::<f64>(h, "AP_2_3")?,
           ap_3_3: parse_optional_card_with_type::<f64>(h, "AP_3_3")?,
           ap_0_4: parse_optional_card_with_type::<f64>(h, "AP_0_4")?,
           ap_1_4: parse_optional_card_with_type::<f64>(h, "AP_1_4")?,
           ap_2_4: parse_optional_card_with_type::<f64>(h, "AP_2_4")?,
           ap_0_5: parse_optional_card_with_type::<f64>(h, "AP_0_5")?,
           ap_1_5: parse_optional_card_with_type::<f64>(h, "AP_1_5")?,
           ap_0_6: parse_optional_card_with_type::<f64>(h, "AP_0_6")?,
           b_0_0: parse_optional_card_with_type::<f64>(h, "B_0_0")?,
           b_1_0: parse_optional_card_with_type::<f64>(h, "B_1_0")?,
           b_2_0: parse_optional_card_with_type::<f64>(h, "B_2_0")?,
           b_3_0: parse_optional_card_with_type::<f64>(h, "B_3_0")?,
           b_4_0: parse_optional_card_with_type::<f64>(h, "B_4_0")?,
           b_5_0: parse_optional_card_with_type::<f64>(h, "B_5_0")?,
           b_6_0: parse_optional_card_with_type::<f64>(h, "B_6_0")?,
           b_0_1: parse_optional_card_with_type::<f64>(h, "B_0_1")?,
           b_1_1: parse_optional_card_with_type::<f64>(h, "B_1_1")?,
           b_2_1: parse_optional_card_with_type::<f64>(h, "B_2_1")?,
           b_3_1: parse_optional_card_with_type::<f64>(h, "B_3_1")?,
           b_4_1: parse_optional_card_with_type::<f64>(h, "B_4_1")?,
           b_5_1: parse_optional_card_with_type::<f64>(h, "B_5_1")?,
           b_0_2: parse_optional_card_with_type::<f64>(h, "B_0_2")?,
           b_1_2: parse_optional_card_with_type::<f64>(h, "B_1_2")?,
           b_2_2: parse_optional_card_with_type::<f64>(h, "B_2_2")?,
           b_3_2: parse_optional_card_with_type::<f64>(h, "B_3_2")?,
           b_4_2: parse_optional_card_with_type::<f64>(h, "B_4_2")?,
           b_0_3: parse_optional_card_with_type::<f64>(h, "B_0_3")?,
           b_1_3: parse_optional_card_with_type::<f64>(h, "B_1_3")?,
           b_2_3: parse_optional_card_with_type::<f64>(h, "B_2_3")?,
           b_3_3: parse_optional_card_with_type::<f64>(h, "B_3_3")?,
           b_0_4: parse_optional_card_with_type::<f64>(h, "B_0_4")?,
           b_1_4: parse_optional_card_with_type::<f64>(h, "B_1_4")?,
           b_2_4: parse_optional_card_with_type::<f64>(h, "B_2_4")?,
           b_0_5: parse_optional_card_with_type::<f64>(h, "B_0_5")?,
           b_1_5: parse_optional_card_with_type::<f64>(h, "B_1_5")?,
           b_0_6: parse_optional_card_with_type::<f64>(h, "B_0_6")?,
           bp_0_0: parse_optional_card_with_type::<f64>(h, "BP_0_0")?,
           bp_1_0: parse_optional_card_with_type::<f64>(h, "BP_1_0")?,
           bp_2_0: parse_optional_card_with_type::<f64>(h, "BP_2_0")?,
           bp_3_0: parse_optional_card_with_type::<f64>(h, "BP_3_0")?,
           bp_4_0: parse_optional_card_with_type::<f64>(h, "BP_4_0")?,
           bp_5_0: parse_optional_card_with_type::<f64>(h, "BP_5_0")?,
           bp_6_0: parse_optional_card_with_type::<f64>(h, "BP_6_0")?,
           bp_0_1: parse_optional_card_with_type::<f64>(h, "BP_0_1")?,
           bp_1_1: parse_optional_card_with_type::<f64>(h, "BP_1_1")?,
           bp_2_1: parse_optional_card_with_type::<f64>(h, "BP_2_1")?,
           bp_3_1: parse_optional_card_with_type::<f64>(h, "BP_3_1")?,
           bp_4_1: parse_optional_card_with_type::<f64>(h, "BP_4_1")?,
           bp_5_1: parse_optional_card_with_type::<f64>(h, "BP_5_1")?,
           bp_0_2: parse_optional_card_with_type::<f64>(h, "BP_0_2")?,
           bp_1_2: parse_optional_card_with_type::<f64>(h, "BP_1_2")?,
           bp_2_2: parse_optional_card_with_type::<f64>(h, "BP_2_2")?,
           bp_3_2: parse_optional_card_with_type::<f64>(h, "BP_3_2")?,
           bp_4_2: parse_optional_card_with_type::<f64>(h, "BP_4_2")?,
           bp_0_3: parse_optional_card_with_type::<f64>(h, "BP_0_3")?,
           bp_1_3: parse_optional_card_with_type::<f64>(h, "BP_1_3")?,
           bp_2_3: parse_optional_card_with_type::<f64>(h, "BP_2_3")?,
           bp_3_3: parse_optional_card_with_type::<f64>(h, "BP_3_3")?,
           bp_0_4: parse_optional_card_with_type::<f64>(h, "BP_0_4")?,
           bp_1_4: parse_optional_card_with_type::<f64>(h, "BP_1_4")?,
           bp_2_4: parse_optional_card_with_type::<f64>(h, "BP_2_4")?,
           bp_0_5: parse_optional_card_with_type::<f64>(h, "BP_0_5")?,
           bp_1_5: parse_optional_card_with_type::<f64>(h, "BP_1_5")?,
           bp_0_6: parse_optional_card_with_type::<f64>(h, "BP_0_6")?,

        })
    }
}
